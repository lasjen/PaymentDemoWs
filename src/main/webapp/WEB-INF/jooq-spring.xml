<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ws="http://jax-ws.dev.java.net/spring/core"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://jax-ws.dev.java.net/spring/core
        http://jax-ws.dev.java.net/spring/core.xsd
        http://jax-ws.dev.java.net/spring/servlet
        http://jax-ws.java.net/spring/servlet.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	<!-- This is needed if you want to use the @Transactional annotation -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<context:annotation-config />
	<context:component-scan base-package="com.evry" />

	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:comp/env/jdbc/UCPPool" /> </bean> -->
	<bean id="dataSource" class="oracle.ucp.jdbc.PoolDataSourceImpl">

		<property name="connectionFactoryClassName" value="oracle.jdbc.pool.OracleDataSource" />

		<property name="inactiveConnectionTimeout" value="20" />
		<property name="user" value="pmtdata" />
		<property name="password" value="pmt" />
		<property name="URL"
			value="jdbc:oracle:thin:@(DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.56.71)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.56.72)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=ractp.localdomain)))" />
		<property name="minPoolSize" value="2" />
		<property name="maxPoolSize" value="5" />
		<property name="initialPoolSize" value="2" />
		<property name="FastConnectionFailoverEnabled" value="true" />
		<property name="ONSConfiguration" value="nodes=192.168.56.71:6200,192.168.56.72:6200" />
	</bean>

	<!-- Configure Spring's transaction manager to use a DataSource -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy, 
		which can dynamically discover the transaction context -->
	<bean id="transactionAwareDataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
		<constructor-arg ref="transactionAwareDataSource" />
	</bean>

	<!-- Configure the DSL object, optionally overriding jOOQ Exceptions with 
		Spring Exceptions -->
	<bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
		<constructor-arg ref="config" />
	</bean>

	<bean id="exceptionTranslator" class="com.evry.demo.spring.exception.ExceptionTranslator" />

	<!-- Invoking an internal, package-private constructor for the example Implement 
		your own Configuration for more reliable behaviour -->
	<bean class="org.jooq.impl.DefaultConfiguration" name="config">
		<property name="SQLDialect">
			<value type="org.jooq.SQLDialect">H2</value>
		</property>
		<property name="connectionProvider" ref="connectionProvider" />
		<property name="executeListenerProvider">
			<array>
				<bean class="org.jooq.impl.DefaultExecuteListenerProvider">
					<constructor-arg index="0" ref="exceptionTranslator" />
				</bean>
			</array>
		</property>
	</bean>

	<!-- This is the "business-logic" -->

	<bean id="dao" class="com.evry.demo.dao.TestDao" />
	<bean id="cdao" class="com.evry.demo.dao.CustomerDao" />
	
	<bean id="test" class="com.evry.demo.service.TestServiceImpl">
		<property name="dao" ref="dao" />
	</bean>

	<bean id="cust" class="com.evry.demo.service.CustomerServiceImpl">
		<property name="cdao" ref="cdao" />
	</bean>
	
	<bean id="randomService" class="com.evry.demo.ws.RandomService">
		<property name="testService" ref="test" />
		<property name="customerService" ref="cust" />
	</bean>
	
	<wss:binding url="/randomws">
		<wss:service>
			<ws:service bean="#randomService" />
		</wss:service>

	</wss:binding>



</beans>